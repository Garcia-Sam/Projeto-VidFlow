Para entender melhor as Promises, precisamos primeiro conhecer o conceito de programação assíncrona:

Na programação síncrona, o código é executado linha por linha, ou seja, uma linha de código não começará a ser executada até que a linha anterior tenha sido totalmente concluída. No entanto, na programação assíncrona, o código não espera que uma linha seja concluída antes de passar para a próxima. Isso é muito útil quando estamos realizando tarefas que podem demorar algum tempo, como carregar uma imagem ou buscar dados de um servidor.

As Promises em JavaScript são objetos que representam o estado de uma operação assíncrona. Uma Promise pode estar em um de três estados: pendente(estado inicial, nem cumprido nem rejeitado), resolvida/fulfilled (a operação assíncrona foi concluída com sucesso) ou rejeitada/rejected (a operação assíncrona falhou). 
    let promise = new Promise((resolve, reject) => {
        // código assíncrono aqui
        if (/* tudo ocorreu bem */) {
            resolve("funcionou!");
        } else {
            reject("houve um erro");
        }
    });

No exemplo acima, temos uma função que recebe dois parâmetros: resolve e reject, que são funções que serão chamadas quando a Promise for resolvida ou rejeitada, respectivamente.

Depois que a Promise é retornada, podemos lidar com seu resultado utilizando o método then para o caso de sucesso (resolvida) e o método catch para o caso de erro (rejeitada):
    promise.then((message) => {
        console.log("Sucesso: " + message);
    }).catch((message) => {
        console.error("Erro: " + message);
    });
    
É importante lembrar que a promise só pode ser resolvida ou rejeitada uma vez. Se nós resolvermos e depois rejeitarmos uma mesma promise, a rejeição será ignorada.

Além disso, pode ser um desafio lidar com várias Promises. Para isso, temos disponíveis as funções Promise.all e Promise.race:

Promise.all: recebe um array de Promises e retorna uma nova promiseque resolve quando todas as Promises do array foram resolvidas ou uma delas foi rejeitada.

Promise.race: retorna uma promiseque se resolve ou rejeita com a resolução ou rejeição da primeira promiseno array a se resolver.

As Promises são uma parte importante do JavaScript moderno e são usadas em muitas bibliotecas e frameworks populares, como React e Angular. Ao entender como as Promises funcionam, você terá mais facilidade para lidar com código assíncrono efetivamente.

Entendendo Callbacks

    Imagine que você está preparando uma refeição e coloca o pão na torradeira. Agora, você não vai ficar parado olhando para a torradeira até que ela finalize, você provavelmente vai fazer outra coisa, como preparar café, até o momento em que a torradeira apitar, indicando que o pão está pronto. Nesse cenário da cozinha, o apito da torradeira funciona como um callback na programação.

Callbacks em JavaScript:

    Em JavaScript, um callback é uma função que é passada como argumento para outra função e é executada após a conclusão de uma operação assíncrona ou evento específico. Os callbacks são amplamente utilizados para lidar com tarefas assíncronas, como chamadas de API, leitura de arquivos, eventos de usuário e muito mais.

O Problema do "Callback Hell":

    O "Callback Hell" é um termo usado para descrever a situação em que múltiplas chamadas de função com callbacks são aninhadas profundamente dentro de outras chamadas de função. Isso cria um código que se assemelha a uma pirâmide, tornando-o difícil de ler, manter e depurar. À medida que mais operações assíncronas são adicionadas, a complexidade do código aumenta rapidamente.

Exemplo de "Callback Hell" com .then:

    Vamos considerar um exemplo hipotético de "Callback Hell" usando .then para encadear operações assíncronas. Suponhamos que desejamos executar três tarefas assíncronas sequenciais, onde cada uma depende do resultado da anterior:
        fazerAlgoAsync()
            .then(resultado1 => {
                console.log(resultado1);
                return fazerOutraCoisaAsync();
            })
            .then(resultado2 => {
                console.log(resultado2);
                return fazerMaisAlgoAsync();
            })
            .then(resultado3 => {
                console.log(resultado3);
            })
            .catch(erro => {
                console.error('Ocorreu um erro:', erro);
            });

    Nesse exemplo, fazerAlgoAsync, fazerOutraCoisaAsync e fazerMaisAlgoAsync representam operações assíncronas, como chamadas de API ou acesso a banco de dados. Cada uma retorna uma Promise, que é encadeada usando .then. A complexidade aumenta à medida que mais operações são adicionadas, tornando o código difícil de entender e manter.
